import re


# TODO: improve exceptions
def is_bool(s: str) -> bool:
    if s == 'true' or s == "false":
        return True

    return False


def to_bool(s: str) -> bool:
    if not is_bool(s):
        raise Exception(f"String '{s}' cannot be converted to 'bool'")

    if s == 'true':
        return True
    else:
        return False


def is_number(s: str) -> bool:
    if re.match('\d+\.?\d*', s):
        return True
    else:
        return False


def to_number(s: str):
    if not is_number(s):
        raise Exception(f"String '{s}' cannot be converted to 'int' or 'float'")

    if s.find('.') == -1:
        return int(s)
    else:
        return float(s)


# TODO: improve
def is_str(s: str) -> bool:
    if s[0] == '"' and s[-1] == '"' and s.count('"') == 2:
        return True

    return False


def is_arr(s: str) -> bool:
    if s[0] == '[' and s[-1] == ']':
        return True

    return False


def is_dict(s: str) -> bool:
    if s[0] == '{' and s[-1] == '}':
        return True

    return False


# Local func
def matches(ch1, ch2):
    if ch1 == '{' and ch2 == '}' or ch1 == '[' and ch2 == ']':
        return True

    return False


# TODO: not cut str
def split_arr(s: str):
    s = s[1:-1]
    elements = []
    brackets = []
    start_i = 0

    for i in range(len(s)):
        if s[i] == '{' or s[i] == '[':
            brackets.append(s[i])
        if s[i] == '}' or s[i] == ']':
            bracket = brackets.pop()
            if not matches(bracket, s[i]):
                raise Exception(f"Invalid JSON format! Brackets {bracket} and {s[i]} doesn't match")

        if s[i] == ',' and len(brackets) == 0:
            elements.append(s[start_i:i])
            start_i = i + 2

    elements.append(s[start_i:])
    return elements


# Remove duplicates
def split_dict(s: str):
    s = s[1:-1]
    elements = []
    brackets = []
    start_i = 0
    key, value = None, None

    for i in range(len(s)):
        if s[i] == '{' or s[i] == '[':
            brackets.append(s[i])
        if s[i] == '}' or s[i] == ']':
            bracket = brackets.pop()
            if not matches(bracket, s[i]):
                raise Exception(f"Invalid JSON format! Brackets {bracket} and {s[i]} doesn't match")

        if s[i] == ':' and len(brackets) == 0:
            key = s[start_i:i]
            start_i = i + 2

        if s[i] == ',' and len(brackets) == 0:
            value = s[start_i:i]
            start_i = i + 2
            elements.append((key, value))

    value = s[start_i:]
    elements.append((key, value))
    return elements